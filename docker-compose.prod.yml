version: '3.8'

services:
    # Database Services (Production)
    postgres:
        image: postgres:15-alpine
        container_name: makrx-postgres-prod
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - makrx-network
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
            resources:
                limits:
                    memory: 1G
                    cpus: '0.5'
        restart: unless-stopped

    redis:
        image: redis:7-alpine
        container_name: makrx-redis-prod
        volumes:
            - redis_data:/data
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
        networks:
            - makrx-network
        command: redis-server /usr/local/etc/redis/redis.conf
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: '0.25'
        restart: unless-stopped

    # Backend Services (Production)
    makrcave-backend:
        build:
            context: ./makrcave-backend
            dockerfile: Dockerfile
        container_name: makrcave-backend-prod
        environment:
            - ENVIRONMENT=production
            - DEBUG=false
            - DATABASE_URL=${MAKRCAVE_DATABASE_URL}
            - REDIS_URL=${REDIS_URL}
            - KEYCLOAK_ISSUER=${KEYCLOAK_ISSUER}
            - SECRET_KEY=${MAKRCAVE_SECRET_KEY}
            - LOG_LEVEL=warning
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - makrx-network
        volumes:
            - makrcave_uploads:/app/uploads
            - makrcave_logs:/app/logs
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        deploy:
            resources:
                limits:
                    memory: 1G
                    cpus: '0.5'
            replicas: 2
        restart: unless-stopped

    makrx-store-backend:
        build:
            context: ./makrx-store-backend
            dockerfile: Dockerfile
        container_name: makrx-store-backend-prod
        environment:
            - ENVIRONMENT=production
            - DEBUG=false
            - DATABASE_URL=${STORE_DATABASE_URL}
            - REDIS_URL=${REDIS_URL}
            - SERVICE_MAKRCAVE_URL=http://makrcave-backend:8000
            - KEYCLOAK_ISSUER=${KEYCLOAK_ISSUER}
            - SECRET_KEY=${STORE_SECRET_KEY}
            - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
            - S3_ENDPOINT=${S3_ENDPOINT}
            - S3_ACCESS_KEY=${S3_ACCESS_KEY}
            - S3_SECRET_KEY=${S3_SECRET_KEY}
            - LOG_LEVEL=warning
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            makrcave-backend:
                condition: service_healthy
        networks:
            - makrx-network
        volumes:
            - store_logs:/app/logs
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        deploy:
            resources:
                limits:
                    memory: 1G
                    cpus: '0.5'
            replicas: 2
        restart: unless-stopped

    # Frontend Services (Production)
    gateway-frontend:
        build:
            context: ./frontend/gateway-frontend
            dockerfile: Dockerfile
        container_name: gateway-frontend-prod
        environment:
            - NODE_ENV=production
        networks:
            - makrx-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: '0.25'
            replicas: 2
        restart: unless-stopped

    makrcave-frontend:
        build:
            context: ./frontend/makrcave-frontend
            dockerfile: Dockerfile
        container_name: makrcave-frontend-prod
        environment:
            - NODE_ENV=production
            - VITE_API_URL=${MAKRCAVE_API_URL}
            - VITE_KEYCLOAK_URL=${KEYCLOAK_URL}
        networks:
            - makrx-network
        depends_on:
            - makrcave-backend
        healthcheck:
            test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost/']
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: '0.25'
            replicas: 2
        restart: unless-stopped

    makrx-store-frontend:
        build:
            context: ./makrx-store-frontend
            dockerfile: Dockerfile
        container_name: makrx-store-frontend-prod
        environment:
            - NODE_ENV=production
            - NEXT_PUBLIC_API_URL=${STORE_API_URL}
            - NEXT_PUBLIC_KEYCLOAK_URL=${KEYCLOAK_URL}
        networks:
            - makrx-network
        depends_on:
            - makrx-store-backend
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000']
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: '0.25'
            replicas: 2
        restart: unless-stopped

    # Nginx Load Balancer (Production)
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        container_name: makrx-nginx-prod
        ports:
            - '80:80'
            - '443:443'
        depends_on:
            - gateway-frontend
            - makrcave-frontend
            - makrx-store-frontend
            - makrcave-backend
            - makrx-store-backend
        networks:
            - makrx-network
        volumes:
            - ./nginx/conf.d:/etc/nginx/conf.d
            - ./nginx/ssl:/etc/nginx/ssl
            - nginx_logs:/var/log/nginx
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost/health']
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: '0.5'
        restart: unless-stopped

    # Monitoring Services (Production)
    prometheus:
        image: prom/prometheus:latest
        container_name: makrx-prometheus
        ports:
            - '9090:9090'
        volumes:
            - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        networks:
            - makrx-network
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
        restart: unless-stopped

    grafana:
        image: grafana/grafana:latest
        container_name: makrx-grafana
        ports:
            - '3000:3000'
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        volumes:
            - grafana_data:/var/lib/grafana
            - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
        networks:
            - makrx-network
        depends_on:
            - prometheus
        restart: unless-stopped

# Networks
networks:
    makrx-network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16

# Volumes
volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local
    makrcave_uploads:
        driver: local
    makrcave_logs:
        driver: local
    store_logs:
        driver: local
    nginx_logs:
        driver: local
    prometheus_data:
        driver: local
    grafana_data:
        driver: local
