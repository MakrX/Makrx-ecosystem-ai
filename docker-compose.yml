version: '3.8'

services:
    # Database Services
    postgres:
        image: postgres:15-alpine
        container_name: makrx-postgres
        environment:
            POSTGRES_DB: makrx_dev
            POSTGRES_USER: makrx
            POSTGRES_PASSWORD: makrx_dev_password
        ports:
            - '5432:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init-scripts:/docker-entrypoint-initdb.d
        networks:
            - makrx-network
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U makrx -d makrx_dev']
            interval: 30s
            timeout: 10s
            retries: 3

    redis:
        image: redis:7-alpine
        container_name: makrx-redis
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        networks:
            - makrx-network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 10s
            retries: 3

    # Backend Services
    makrcave-backend:
        build:
            context: ./makrcave-backend
            dockerfile: Dockerfile
        container_name: makrcave-backend
        ports:
            - '8000:8000'
        environment:
            - ENVIRONMENT=development
            - DEBUG=true
            - DATABASE_URL=postgresql://makrx:makrx_dev_password@postgres:5432/makrx_dev
            - REDIS_URL=redis://redis:6379/0
            - HOST=0.0.0.0
            - PORT=8000
            - LOG_LEVEL=info
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - makrx-network
        volumes:
            - ./makrcave-backend:/app
            - makrcave_uploads:/app/uploads
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    makrx-store-backend:
        build:
            context: ./makrx-store-backend
            dockerfile: Dockerfile
        container_name: makrx-store-backend
        ports:
            - '8001:8000'
        environment:
            - ENVIRONMENT=development
            - DEBUG=true
            - DATABASE_URL=postgresql+asyncpg://makrx:makrx_dev_password@postgres:5432/makrx_store_dev
            - REDIS_URL=redis://redis:6379/1
            - SERVICE_MAKRCAVE_URL=http://makrcave-backend:8000
            - KEYCLOAK_ISSUER=http://keycloak:8080/realms/makrx
            - S3_ENDPOINT=http://minio:9000
            - S3_ACCESS_KEY=minioadmin
            - S3_SECRET_KEY=minioadmin
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            makrcave-backend:
                condition: service_healthy
        networks:
            - makrx-network
        volumes:
            - ./makrx-store-backend:/app
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Frontend Services
    gateway-frontend:
        build:
            context: ./frontend/gateway-frontend
            dockerfile: Dockerfile
        container_name: gateway-frontend
        ports:
            - '8080:8080'
        environment:
            - NODE_ENV=development
        networks:
            - makrx-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
            interval: 30s
            timeout: 10s
            retries: 3

    makrcave-frontend:
        build:
            context: ./frontend/makrcave-frontend
            dockerfile: Dockerfile
        container_name: makrcave-frontend
        ports:
            - '3001:80'
        environment:
            - NODE_ENV=development
            - VITE_API_URL=http://localhost:8000
            - VITE_KEYCLOAK_URL=http://localhost:8080/realms/makrx
        networks:
            - makrx-network
        depends_on:
            - makrcave-backend
        healthcheck:
            test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost/']
            interval: 30s
            timeout: 10s
            retries: 3

    makrx-store-frontend:
        build:
            context: ./makrx-store-frontend
            dockerfile: Dockerfile
        container_name: makrx-store-frontend
        ports:
            - '3003:3000'
        environment:
            - NODE_ENV=development
            - NEXT_PUBLIC_API_URL=http://localhost:8001
            - NEXT_PUBLIC_KEYCLOAK_URL=http://localhost:8080/realms/makrx
        networks:
            - makrx-network
        depends_on:
            - makrx-store-backend
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000']
            interval: 30s
            timeout: 10s
            retries: 3

    # Supporting Services
    keycloak:
        image: quay.io/keycloak/keycloak:22.0
        container_name: makrx-keycloak
        environment:
            KEYCLOAK_ADMIN: admin
            KEYCLOAK_ADMIN_PASSWORD: admin
            KC_DB: postgres
            KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
            KC_DB_USERNAME: makrx
            KC_DB_PASSWORD: makrx_dev_password
            KC_HOSTNAME_STRICT: false
            KC_HTTP_ENABLED: true
        ports:
            - '8080:8080'
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - makrx-network
        volumes:
            - ./services/keycloak/realm-export:/opt/keycloak/data/import
        command: ['start-dev', '--import-realm']
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8080/health/ready']
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s

    minio:
        image: minio/minio:latest
        container_name: makrx-minio
        ports:
            - '9000:9000'
            - '9001:9001'
        environment:
            MINIO_ROOT_USER: minioadmin
            MINIO_ROOT_PASSWORD: minioadmin
        volumes:
            - minio_data:/data
        networks:
            - makrx-network
        command: server /data --console-address ":9001"
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
            interval: 30s
            timeout: 10s
            retries: 3

    # Nginx Reverse Proxy
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        container_name: makrx-nginx
        ports:
            - '80:80'
            - '443:443'
        depends_on:
            - gateway-frontend
            - makrcave-frontend
            - makrx-store-frontend
            - makrcave-backend
            - makrx-store-backend
        networks:
            - makrx-network
        volumes:
            - ./nginx/conf.d:/etc/nginx/conf.d
            - nginx_logs:/var/log/nginx
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost/health']
            interval: 30s
            timeout: 10s
            retries: 3

# Networks
networks:
    makrx-network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16

# Volumes
volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local
    minio_data:
        driver: local
    makrcave_uploads:
        driver: local
    nginx_logs:
        driver: local
